import argparse
import json
import subprocess
from pathlib import Path

from bs4 import BeautifulSoup

ROOT = Path(__file__).parent.parent
SARIF_TEMPLATE_FILE = ROOT / "template" / "sarif.json"


class GenerateSarif:
    def __init__(self, repository, action_run_id, output_file, html_file_path) -> None:
        self.output_file = self.set_output(output_file)
        self.repository = repository
        self.action_run_id = action_run_id
        self.html_file_path = Path(html_file_path)
        self.sarif_file = {}
        self.vulnerablities = []
        self.load_sample_sarif_file()
        self.set_cve_bin_tool_version()
        if self.check_cves_in_html():
            self.add_report_result()
            self.extract_vulnerablities_from_html()
            self.update_sarif_with_vulnerbilities()

    def load_sample_sarif_file(self):
        with open(SARIF_TEMPLATE_FILE) as fd:
            self.sarif_file = json.load(fd)

    def set_cve_bin_tool_version(self):
        cve_bin_tool_version = (
            subprocess.check_output(["cve-bin-tool", "--version"])
            .strip()
            .decode("utf-8")
        )
        self.sarif_file["runs"][0]["tool"]["driver"][
            "semanticVersion"
        ] = cve_bin_tool_version

    def add_report_result(self):
        report_result = {
            "ruleId": "@cve-bin-tool/html_pdf_report",
            "message": {
                "text": f"Here is the HTML & PDF Scan Reports: https://github.com/{self.repository}/actions/runs/{self.action_run_id}. To download the reports, first click on the link and scroll down to the 'Artifacts' section then click on 'cve_reports'."
            },
            "locations": [{"physicalLocation": {"artifactLocation": {"uri": "*"}}}],
        }
        self.sarif_file["runs"][0]["results"].append(report_result)

    def set_output(self, output):
        if Path(args.output).is_dir():
            output_file = Path(output) / "scan-report.sarif"
        else:
            if args.output.endswith(".sarif"):
                output_file = Path(output)
            else:
                output_file = Path(f"{output}.sarif")
        return output_file

    def write_file(self):
        with open(self.output_file, "w+") as fd:
            fd.write(json.dumps(self.sarif_file))

    def check_cves_in_html(self):
        if not self.html_file_path.is_file():
            return False
        with open(self.html_file_path) as fp:
            soup = BeautifulSoup(fp, "html.parser")
        cve_summaries = soup.select("#cveSummary td")
        cve_found = False
        for cve_summary in cve_summaries:
            if int(cve_summary.get_text()) != 0:
                cve_found = True
                break
        return cve_found

    def extract_vulnerablities_from_html(self):
        self.vulnerablities = []

        with open(self.html_file_path) as fp:
            soup = BeautifulSoup(fp, "html.parser")

        modals = soup.select(".modal-content")
        for modal in modals:
            modal_title = modal.select(".modal-title span")
            product = str(modal_title[1].get_text())
            version = str(modal_title[2].get_text())
            filepath = str(
                modal.select(".modal-content .row .col-12 ul.list-group li > h6")[1]
                .get_text()
                .split("contains")[0]
                .strip()
            )
            cve_list = modal.select(".row .row")[0].select("li.list-group-item")
            for cve_item in cve_list:
                product_cve = {}
                cve_info = cve_item.select(".col-sm")
                product_cve["product"] = product
                product_cve["version"] = version
                product_cve["filepath"] = filepath
                product_cve["cve_remark"] = str(
                    cve_info[0].select(".badge")[0].get_text()
                )
                product_cve["cve_id"] = str(
                    cve_info[0]
                    .get_text()
                    .replace(product_cve["cve_remark"], "")
                    .strip()
                )
                product_cve["cve_severity"] = str(cve_info[1].get_text().strip())
                product_cve["cve_summary"] = str(
                    cve_item.select(".summary")[1]
                    .get_text()
                    .replace("..read more", "")
                    .replace("\n", "")
                    .strip()
                )
                if len(cve_item.select(".summary a")):
                    product_cve["cve_link"] = str(
                        cve_item.select(".summary a")[0].get("href")
                    )
                else:
                    product_cve["cve_link"] = "Sorry, source not available."
                self.vulnerablities.append(product_cve)

    def update_sarif_with_vulnerbilities(self):
        for vulnerablity in self.vulnerablities:
            self.sarif_file["runs"][0]["tool"]["driver"]["rules"].append(
                {
                    "id": vulnerablity["cve_id"],
                    "name": f"Vulnerable components found in {vulnerablity['product']}",
                    "shortDescription": {
                        "text": f"Vulnerable components found in {vulnerablity['product']}",
                    },
                    "fullDescription": {"text": vulnerablity["cve_summary"]},
                    "defaultConfiguration": {"level": "warning"},
                    "properties": {"tags": ["vulnerablity"], "precision": "high"},
                }
            )
            cve = {
                "ruleId": vulnerablity["cve_id"],
                "message": {
                    "text": f"Product Name: {vulnerablity['product']}<br/>Version: {vulnerablity['version']}<br/>CVE ID: {vulnerablity['cve_id']}<br/>CVE Severity: {vulnerablity['cve_severity']}<br/>CVE Remark: {vulnerablity['cve_remark']}<br/>Source: {vulnerablity['cve_link']}"
                },
                "locations": [
                    {
                        "physicalLocation": {
                            "artifactLocation": {"uri": vulnerablity["filepath"]}
                        }
                    }
                ],
            }
            self.sarif_file["runs"][0]["results"].append(cve)


parser = argparse.ArgumentParser(
    prog="generate-sarif",
    description="Generate Sarif for CVE Binary Tool GitHub Action",
)

parser.add_argument("-r", "--repo", required=True)
parser.add_argument("-R", "--run-id", required=True)
parser.add_argument("-o", "--output", required=True)
parser.add_argument("--html-file-path", required=True)

args = parser.parse_args()

gen_sarif = GenerateSarif(
    repository=args.repo,
    action_run_id=args.run_id,
    output_file=args.output,
    html_file_path=args.html_file_path,
)
gen_sarif.write_file()
